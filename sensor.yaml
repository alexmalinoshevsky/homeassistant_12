##############################################################
## Sensor  ##
##############################################################

##########################################################
## Season
##########################################################

- platform: season

##########################################################
## NUT UPS
##########################################################

- platform: nut
  host: !secret nas2_host
  username: !secret nut_user
  password: !secret nut_pass
  resources:
    - ups.load
    - ups.realpower.nominal
    - battery.runtime
    - input.voltage
    - battery.charge
    - ups.status.display

##########################################################
## HA Instance
##########################################################

- platform: command_line
  command: python3 -c "import requests; print(requests.get('https://pypi.python.org/pypi/homeassistant/json').json()['info']['version'])"
  name: Current HA Release
  scan_interval: 3600

- platform: sql
  db_url: mysql://REDACTED:REDACTED@REDACTED/hass_docker_db
  queries:
    - name: HA DB Size
      query: 'SELECT table_schema "database", Round(Sum(data_length + index_length) / 1024 / 1024 / 1024, 3) "value" FROM information_schema.tables WHERE table_schema="hass_docker_db" GROUP BY table_schema;'
      column: "value"
      unit_of_measurement: GB

- platform: uptime

- platform: filesize
  file_paths:
    - /config/home-assistant.log

##########################################################
## Templates
##########################################################

- platform: template
  sensors:
    octoprint_time_remaining_friendly:
      value_template: >
        {% set etime = states.sensor.octoprint_time_remaining.state | int %}
        {% set seconds = etime % 60 %}
        {% set minutes = ((etime % 3600) / 60) | int %}
        {% set hours = ((etime % 86400) / 3600) | int %}
        {% set days = (etime / 86400) | int %}
        {%- if days -%}
          {{days}} day{{'s, ' if days > 1 else ', '}}
        {%- endif -%}
        {%- if hours -%}
          {{hours}} hour{{'s, ' if hours > 1 else ', '}}
        {%- endif -%}
        {{minutes}} minute{{'s' if minutes > 1 else ''}}
      friendly_name: "Print Time Left"

    octoprint_time_elapsed_friendly:
      value_template: >
        {% set etime = states.sensor.octoprint_time_elapsed.state | int %}
        {% set seconds = etime % 60 %}
        {% set minutes = ((etime % 3600) / 60) | int %}
        {% set hours = ((etime % 86400) / 3600) | int %}
        {% set days = (etime / 86400) | int %}
        {%- if days -%}
          {{days}} day{{'s, ' if days > 1 else ', '}}
        {%- endif -%}
        {%- if hours -%}
          {{hours}} hour{{'s, ' if hours > 1 else ', '}}
        {%- endif -%}
        {{minutes}} minute{{'s' if minutes > 1 else ''}}
      friendly_name: "Print Time"

    dark_outside:
      value_template: >-
        {%- if (states.sun.sun.attributes.elevation | int < 7.5 ) -%}
              True
        {%- else -%}
              False
        {%- endif -%}

    pool_contract_signed:
      value_template: '{{ ((as_timestamp(now())-(states.input_datetime.pool_contract_signed.attributes.timestamp)) | int /60/1440) | round(0) }}'
      unit_of_measurement: 'Days'
      # entity_id: input_datetime.pool_contract_signed,sensor.time

    media_center_remote:
      value_template: "{{ states.remote.media_center.attributes.current_activity }}"
      friendly_name: "Media Center"

    master_remote:
      value_template: "{{ states.remote.master.attributes.current_activity }}"
      friendly_name: "Master"

    allergy_index_today_rating:
      value_template: "{{ states.sensor.allergy_index_today.attributes.rating }}"
      friendly_name: "Rating:"
      icon_template: mdi:playlist-star

    allergy_index_today_allergen_name_1:
      value_template: "{{ states.sensor.allergy_index_today.attributes.allergen_name_1 }}"
      friendly_name: "Allergen 1:"
      icon_template: mdi:flower

    allergy_index_today_allergen_name_2:
      value_template: "{{ states.sensor.allergy_index_today.attributes.allergen_name_2 }}"
      friendly_name: "Allergen 2:"
      icon_template: mdi:flower

    allergy_index_today_allergen_name_3:
      value_template: "{{ states.sensor.allergy_index_today.attributes.allergen_name_3 }}"
      friendly_name: "Allergen 3:"
      icon_template: mdi:flower

    allergy_index_tomorrow_rating:
      value_template: "{{ states.sensor.allergy_index_tomorrow.attributes.rating }}"
      friendly_name: "Rating:"
      icon_template: mdi:playlist-star

    allergy_index_tomorrow_allergen_name_1:
      value_template: "{{ states.sensor.allergy_index_tomorrow.attributes.allergen_name_1 }}"
      friendly_name: "Allergen 1:"
      icon_template: mdi:flower

    allergy_index_tomorrow_allergen_name_2:
      value_template: "{{ states.sensor.allergy_index_tomorrow.attributes.allergen_name_2 }}"
      friendly_name: "Allergen 2:"
      icon_template: mdi:flower

    allergy_index_tomorrow_allergen_name_3:
      value_template: "{{ states.sensor.allergy_index_tomorrow.attributes.allergen_name_3 }}"
      friendly_name: "Allergen 3:"
      icon_template: mdi:flower

    esxi_vmhost_esxi1_cpu_pct:
      value_template: >
        {% set usage = states.sensor.esxi_vmhost_REDACTED.attributes.cpuusage_ghz | default(0)  %}
        {% set total = states.sensor.esxi_vmhost_REDACTED.attributes.cputotal_ghz | default(0) %}
        {{ (( usage / total ) * 100 ) | round(2) }}
      friendly_name: "ESXi1 CPU %"
      unit_of_measurement: "%"

    esxi_vmhost_esxi1_mem_pct:
      value_template: >
        {% set usage = states.sensor.esxi_vmhost_REDACTED.attributes.memusage_gb | default(0) | int %}
        {% set total = states.sensor.esxi_vmhost_REDACTED.attributes.memtotal_gb | default(0) | int %}
        {{ (( usage / total ) * 100 ) | round(2) }}
      friendly_name: "ESXi1 MEM %"
      unit_of_measurement: "%"

    esxi_vm_vcenter_cpu_pct:
      value_template: >
        {% set usage = states.sensor.esxi_vm_vcenter.attributes.cpu_use_pct | default(0) %}
        {{ usage | round(2) }}
      friendly_name: "vCenter CPU %"
      unit_of_measurement: "%"

    esxi_vm_vcenter_mem_pct:
      value_template: >
        {% set usage = states.sensor.esxi_vm_vcenter.attributes.memory_used_mb | default(0) | int %}
        {% set total = states.sensor.esxi_vm_vcenter.attributes.memory_allocated_mb | default(0) | int %}
        {{ (( usage / total ) * 100 ) | round(2) }}
      friendly_name: "vCenter MEM %"
      unit_of_measurement: "%"

    esxi_vm_vcenter_uptime_hours:
      value_template: >
        {% set uptime = states.sensor.esxi_vm_vcenter.attributes.uptime_hours | default(0) %}
        {{ uptime }}
      friendly_name: "vCenter Uptime"
      unit_of_measurement: "Hours"

    esxi_vm_vcenter_used_space_gb:
      value_template: >
        {% set storage = states.sensor.esxi_vm_vcenter.attributes.used_space_gb | default(0) %}
        {{ storage }}
      friendly_name: "vCenter Storage"
      unit_of_measurement: "GiB"

    esxi_vm_vcenter_snapshots:
      value_template: >
        {% set snapshots = states.sensor.esxi_vm_vcenter.attributes.snapshots | default(0) %}
        {{ snapshots }}
      friendly_name: "vCenter Snapshots"

    sun_elevation:
      value_template: "{{ states.sun.sun.attributes.elevation }}"

    userone_phone_battery:
      value_template: "{{ states.device_tracker.life360_userone_REDACTED.attributes.battery | default(0) | int }}"
      friendly_name: "userone Pixel"
      unit_of_measurement: "%"
      icon_template: >
        {% set battery_level = states.device_tracker.life360_userone_REDACTED.attributes.battery | default(0) | int %}
        {% set battery_round = (battery_level / 10) | int * 10 %}
        {% if battery_round >= 100 %}
          mdi:battery
        {% elif battery_round > 0 %}
          mdi:battery-{{ battery_round }}
        {% else %}
          mdi:battery-alert
        {% endif %}

    usertwo_phone_battery:
      value_template: "{{ states.device_tracker.life360_REDACTED_REDACTED.attributes.battery | default(0) | int }}"
      friendly_name: "usertwo iPhone X"
      unit_of_measurement: "%"
      icon_template: >
        {% set battery_level = states.device_tracker.life360_REDACTED_REDACTED.attributes.battery | default(0) | int %}
        {% set battery_round = (battery_level / 10) | int * 10 %}
        {% if battery_round >= 100 %}
          mdi:battery
        {% elif battery_round > 0 %}
          mdi:battery-{{ battery_round }}
        {% else %}
          mdi:battery-alert
        {% endif %}

    userthree_temp_battery:
      value_template: "{{ states.sensor.temperature_158d0001b9561c.attributes.battery_level | default(0) | int }}"
      friendly_name: "userthree Temp."
      unit_of_measurement: "%"
      icon_template: >
        {% set battery_level = states.sensor.temperature_158d0001b9561c.attributes.battery_level | default(0) | int %}
        {% set battery_round = (battery_level / 10) | int * 10 %}
        {% if battery_round >= 100 %}
          mdi:battery
        {% elif battery_round > 0 %}
          mdi:battery-{{ battery_round }}
        {% else %}
          mdi:battery-alert
        {% endif %}

    userfour_temp_battery:
      value_template: "{{ states.sensor.temperature_158d0001f50d5f.attributes.battery_level | default(0) | int }}"
      friendly_name: "userfour Temp."
      unit_of_measurement: "%"
      icon_template: >
        {% set battery_level = states.sensor.temperature_158d0001f50d5f.attributes.battery_level | default(0) | int %}
        {% set battery_round = (battery_level / 10) | int * 10 %}
        {% if battery_round >= 100 %}
          mdi:battery
        {% elif battery_round > 0 %}
          mdi:battery-{{ battery_round }}
        {% else %}
          mdi:battery-alert
        {% endif %}

    master_temp_battery:
      value_template: "{{ states.sensor.temperature_158d0001fa9e02.attributes.battery_level | default(0) | int }}"
      friendly_name: "Master Temp."
      unit_of_measurement: "%"
      icon_template: >
        {% set battery_level = states.sensor.temperature_158d0001fa9e02.attributes.battery_level | default(0) | int %}
        {% set battery_round = (battery_level / 10) | int * 10 %}
        {% if battery_round >= 100 %}
          mdi:battery
        {% elif battery_round > 0 %}
          mdi:battery-{{ battery_round }}
        {% else %}
          mdi:battery-alert
        {% endif %}

    loft_temp_battery:
      value_template: "{{ states.sensor.temperature_158d0001f51e9e.attributes.battery_level | default(0) | int }}"
      friendly_name: "Loft Temp."
      unit_of_measurement: "%"
      icon_template: >
        {% set battery_level = states.sensor.temperature_158d0001f51e9e.attributes.battery_level | default(0) | int %}
        {% set battery_round = (battery_level / 10) | int * 10 %}
        {% if battery_round >= 100 %}
          mdi:battery
        {% elif battery_round > 0 %}
          mdi:battery-{{ battery_round }}
        {% else %}
          mdi:battery-alert
        {% endif %}

    office_temp_battery:
      value_template: "{{ states.sensor.temperature_158d0001f50dcb.attributes.battery_level | default(0) | int }}"
      friendly_name: "Office Temp."
      unit_of_measurement: "%"
      icon_template: >
        {% set battery_level = states.sensor.temperature_158d0001f50dcb.attributes.battery_level | default(0) | int %}
        {% set battery_round = (battery_level / 10) | int * 10 %}
        {% if battery_round >= 100 %}
          mdi:battery
        {% elif battery_round > 0 %}
          mdi:battery-{{ battery_round }}
        {% else %}
          mdi:battery-alert
        {% endif %}

    office_motion_battery:
      value_template: "{{ states.binary_sensor.motion_sensor_158d00047eaffc.attributes.battery_level | default(0) | int }}"
      friendly_name: "Office Motion"
      unit_of_measurement: "%"
      icon_template: >
        {% set battery_level = states.binary_sensor.motion_sensor_158d00047eaffc.attributes.battery_level | default(0) | int %}
        {% set battery_round = (battery_level / 10) | int * 10 %}
        {% if battery_round >= 100 %}
          mdi:battery
        {% elif battery_round > 0 %}
          mdi:battery-{{ battery_round }}
        {% else %}
          mdi:battery-alert
        {% endif %}

    living_motion_battery:
      value_template: "{{ states.binary_sensor.motion_sensor_REDACTED.attributes.battery_level | default(0) | int }}"
      friendly_name: "Living Motion"
      unit_of_measurement: "%"
      icon_template: >
        {% set battery_level = states.binary_sensor.motion_sensor_REDACTED.attributes.battery_level | default(0) | int %}
        {% set battery_round = (battery_level / 10) | int * 10 %}
        {% if battery_round >= 100 %}
          mdi:battery
        {% elif battery_round > 0 %}
          mdi:battery-{{ battery_round }}
        {% else %}
          mdi:battery-alert
        {% endif %}

    master_switch_battery:
      value_template: "{{ states.binary_sensor.switch_158d0001b86a74.attributes.battery_level | default(0) | int }}"
      friendly_name: "Master Switch"
      unit_of_measurement: "%"
      icon_template: >
        {% set battery_level = states.binary_sensor.switch_158d0001b86a74.attributes.battery_level | default(0) | int %}
        {% set battery_round = (battery_level / 10) | int * 10 %}
        {% if battery_round >= 100 %}
          mdi:battery
        {% elif battery_round > 0 %}
          mdi:battery-{{ battery_round }}
        {% else %}
          mdi:battery-alert
        {% endif %}

    master_switch_usertwo_battery:
      value_template: "{{ states.binary_sensor.switch_158d000450d582.attributes.battery_level | default(0) | int }}"
      friendly_name: "Master Switch2"
      unit_of_measurement: "%"
      icon_template: >
        {% set battery_level = states.binary_sensor.switch_158d000450d582.attributes.battery_level | default(0) | int %}
        {% set battery_round = (battery_level / 10) | int * 10 %}
        {% if battery_round >= 100 %}
          mdi:battery
        {% elif battery_round > 0 %}
          mdi:battery-{{ battery_round }}
        {% else %}
          mdi:battery-alert
        {% endif %}

    chalkboard_switch_battery:
      value_template: "{{ states.binary_sensor.switch_158d0001b76826.attributes.battery_level | default(0) | int }}"
      friendly_name: "Chalkboard Switch"
      unit_of_measurement: "%"
      icon_template: >
        {% set battery_level = states.binary_sensor.switch_158d0001b76826.attributes.battery_level | default(0) | int %}
        {% set battery_round = (battery_level / 10) | int * 10 %}
        {% if battery_round >= 100 %}
          mdi:battery
        {% elif battery_round > 0 %}
          mdi:battery-{{ battery_round }}
        {% else %}
          mdi:battery-alert
        {% endif %}

    kids_leak_sensor_battery:
      value_template: "{{ states.binary_sensor.water_leak_sensor_158d00063341ac.attributes.battery_level | default(0) | int }}"
      friendly_name: "Kids Leak Sensor"
      unit_of_measurement: "%"
      icon_template: >
        {% set battery_level = states.binary_sensor.water_leak_sensor_158d00063341ac.attributes.battery_level | default(0) | int %}
        {% set battery_round = (battery_level / 10) | int * 10 %}
        {% if battery_round >= 100 %}
          mdi:battery
        {% elif battery_round > 0 %}
          mdi:battery-{{ battery_round }}
        {% else %}
          mdi:battery-alert
        {% endif %}

    patio_door_battery:
      value_template: "{{ states.binary_sensor.door_window_sensor_158d0001d85176.attributes.battery_level | default(0) | int }}"
      friendly_name: "Patio Door"
      unit_of_measurement: "%"
      icon_template: >
        {% set battery_level = states.binary_sensor.door_window_sensor_158d0001d85176.attributes.battery_level | default(0) | int %}
        {% set battery_round = (battery_level / 10) | int * 10 %}
        {% if battery_round >= 100 %}
          mdi:battery
        {% elif battery_round > 0 %}
          mdi:battery-{{ battery_round }}
        {% else %}
          mdi:battery-alert
        {% endif %}

    patio_door:
      value_template: '{% if is_state("binary_sensor.door_window_sensor_158d0001d85176", "on") %}Open{% elif is_state("binary_sensor.door_window_sensor_158d0001d85176", "off") %}Closed{% else %}unknown{% endif %}'
      friendly_name: "Patio Door Status"
      icon_template: >
        {% set patio_door_state = states.binary_sensor.door_window_sensor_158d0001d85176.state %}
        {% if patio_door_state == 'on' %}
          mdi:door-open
        {% elif patio_door_state == 'off' %}
          mdi:door-closed
        {% else %}
          mdi:alert-outline
        {% endif %}

    last_run_sprinkler:
      friendly_name: "Last Run"
      value_template: '{{as_timestamp(states.input_datetime.last_run_sprinkler.state) | timestamp_custom("%A, %d %h %I:%M %p")}}'

    qnapups_battery_runtime_min:
      friendly_name: "Battery Runtime"
      unit_of_measurement: "min"
      value_template: >
        {% set time = states.sensor.qnapups_battery_runtime.state %}
        {% set minutes = ((time | int /  60) | string).split('.')[0] %}
        {{minutes}} min

    big_garage_tilt_battery:
      value_template: '{{ states.sensor.z_wave_plus_gold_plated_reliability_garage_door_tilt_sensor_battery_level.state | default(0) | int }}'
      friendly_name: 'Big Garage Tilt Sensor'
      unit_of_measurement: "%"
      icon_template: >
        {% set battery_level = states.sensor.z_wave_plus_gold_plated_reliability_garage_door_tilt_sensor_battery_level.state | default(0) | int %}
        {% set battery_round = (battery_level / 10) |int * 10 %}
        {% if battery_round >= 100 %}
          mdi:battery
        {% elif battery_round > 0 %}
          mdi:battery-{{ battery_round }}
        {% else %}
          mdi:battery-alert
        {% endif %}

    big_garage_tilt:
      value_template: '{% if is_state("binary_sensor.z_wave_plus_gold_plated_reliability_garage_door_tilt_sensor_access_control_window_door_is_open", "on") %}Open{% elif is_state("binary_sensor.z_wave_plus_gold_plated_reliability_garage_door_tilt_sensor_access_control_window_door_is_open", "off") %}Closed{% else %}unknown{% endif %}'
      friendly_name: 'Big Garage Status'
      icon_template: >
        {% set big_garage_state = states.binary_sensor.z_wave_plus_gold_plated_reliability_garage_door_tilt_sensor_access_control_window_door_is_open.state %}
        {% if big_garage_state == 'on' %}
          mdi:garage-open
        {% elif big_garage_state == 'off' %}
          mdi:garage
        {% else %}
          mdi:alert-outline
        {% endif %}     

    ha_uptime:
      friendly_name: "Home Assistant uptime"
      value_template: >-
        {% set up_time =  as_timestamp(now()) - as_timestamp(states('sensor.uptime')) %}
        {% set days = (up_time / 86400) | round(2) %}
        {{ days }}
#        {% set up_time =  as_timestamp(now()) - as_timestamp(states('sensor.uptime')) %}
#        {% if up_time == 0 %}
#          Just restarted...
#        {% else %}
#          {% set minutes = (up_time // 60) | int %}
#          {% set hours = (minutes // 60) %}
#          {% set days = (hours // 24) %}
#          {% set weeks = (days // 7) %}
#          {% set minutes = (minutes % 60) %}
#          {% set hours =  (hours % 24) %}
#          {% set days = (days % 7) %}
#          {% macro phrase(value, name) %}
#                    {%- set value = value %}
#                    {%- set end = 's' if value > 1 else '' %}
#                    {{- '{} {}{}'.format(value, name, end) if value | int > 0 else '' }}
#          {%- endmacro %}
#          {% set text = [ phrase(weeks, 'week'), phrase(days, 'day'), phrase(hours, 'hr'), phrase(minutes, 'min') ] | select('!=','') | list | join(', ') %}
#          {% set last_comma = text.rfind(',') %}
#          {% if last_comma != -1 %}
#            {% set text = text[:last_comma] + ' and' + text[last_comma + 1:] %}
#          {% endif %}
#        {{ text }}
#        {% endif %}

##########################################################
## Deluge
##########################################################

- platform: deluge
  host: !secret deluge_host
  username: !secret deluge_user
  password: !secret deluge_pass
  monitored_variables:
    - "current_status"
    - "download_speed"
    - "upload_speed"

##########################################################
## NAS
##########################################################

- platform: qnap
  host: !secret nas2_host
  username: !secret nas_username
  password: !secret nas_pass
  nics: eth0
  monitored_conditions:
    - status
    - system_temp
    - cpu_usage
    - cpu_temp
    - memory_percent_used
    - network_tx
    - network_rx
    - volume_size_free
    - volume_size_used
    - volume_percentage_used
    - drive_smart_status
    
##########################################################
## Cox Usage - https://github.com/ntalekt/coxusage-docker
##########################################################

# - platform: command_line
#   command: cal $(date +"%m %Y") | awk 'NF {DAYS = $NF}; END {print DAYS}'
#   name: Days In Current Month
#   scan_interval: 3600

# - platform: file
#   name: Cox Utilization
#   file_path: /shared/coxusage.json
#   value_template: >
#     {% if value_json is defined %}
#       {% if value_json.dumUsage | int == 0 and value_json.dumLimit | int == 0 and value_json.dumUtilization | int == 0 %}
#         stats unavailable
#       {% else %}
#         {{ value_json.dumUsage | int }} / {{ value_json.dumLimit | int }} GB ({{ value_json.dumUtilization | int }} %)
#       {% endif %}
#     {% else %}
#       undefined
#     {% endif %}

# - platform: file
#   name: Cox Perc
#   file_path: /shared/coxusage.json
#   value_template: >
#     {% if value_json is defined %}
#       {% if value_json.dumUtilization | int == 0 %}
#         stats unavailable
#       {% else %}
#         {{ value_json.dumUtilization | int }}
#       {% endif %}
#     {% else %}
#       undefined
#     {% endif %}

# - platform: file
#   name: Cox Time Left
#   file_path: /shared/coxusage.json
#   value_template: >
#     {% if value_json is defined %}
#       {% if value_json.dumDaysLeft is defined %}
#         {{ value_json.dumDaysLeft | int }} Days
#       {% else %}
#         unknown
#       {% endif %}
#     {% else %}
#       undefined
#     {% endif %}

# - platform: file
#   name: Cox Avg GB Current
#   file_path: /shared/coxusage.json
#   value_template: >
#     {% if value_json is defined %}
#       {% if value_json.dumUsage | int == 0 and value_json.dumDaysLeft | int == 0 %}
#         stats unavailable
#       {% elif states.sensor.days_in_current_month.state is defined %}
#         {{ (float(value_json.dumUsage) / (float(states.sensor.days_in_current_month.state) - float(value_json.dumDaysLeft))) | round(1) }} GB per day
#       {% else %}
#         month_undefined
#       {% endif %}
#     {% else %}
#       undefined
#     {% endif %}

# - platform: file
#   name: Cox Avg GB Remaining
#   file_path: /shared/coxusage.json
#   value_template: >
#     {% if value_json is defined %}
#       {% if value_json.dumLimit | int == 0 and value_json.dumUsage | int == 0 and value_json.dumDaysLeft | int == 0 %}
#         stats unavailable
#       {% else %}
#         {{ ((float(value_json.dumLimit) - float(value_json.dumUsage)) / float(value_json.dumDaysLeft)) | round(1) }} GB per day
#       {% endif %}
#     {% else %}
#       undefined
#     {% endif %}

##########################################################
## Google travel time
##########################################################

- platform: google_travel_time
  name: usertwo To Home
  api_key: !secret google_travel_api
  origin: !secret device_tracker_usertwo
  destination: zone.home

- platform: google_travel_time
  name: userone To Home
  api_key: !secret google_travel_api
  origin: !secret device_tracker_userone
  destination: zone.home

- platform: google_travel_time
  name: userone To Lifetime
  api_key: !secret google_travel_api
  origin: !secret device_tracker_userone
  destination: zone.lifetime

- platform: google_travel_time
  name: usertwo To Lifetime
  api_key: !secret google_travel_api
  origin: !secret device_tracker_usertwo
  destination: zone.lifetime
